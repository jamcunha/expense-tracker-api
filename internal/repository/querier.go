// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/shopspring/decimal"
)

type Querier interface {
	CreateBudget(ctx context.Context, arg CreateBudgetParams) (Budget, error)
	CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error)
	// TODO: add query (and route) to get all expenses in a time interval
	CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error)
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	DeleteBudget(ctx context.Context, arg DeleteBudgetParams) (Budget, error)
	DeleteCategory(ctx context.Context, arg DeleteCategoryParams) (Category, error)
	DeleteExpense(ctx context.Context, arg DeleteExpenseParams) (Expense, error)
	DeleteUser(ctx context.Context, id uuid.UUID) (User, error)
	GetBudgetByID(ctx context.Context, arg GetBudgetByIDParams) (Budget, error)
	GetCategoryByID(ctx context.Context, arg GetCategoryByIDParams) (Category, error)
	GetCategoryExpenses(ctx context.Context, arg GetCategoryExpensesParams) ([]Expense, error)
	GetCategoryExpensesPaged(ctx context.Context, arg GetCategoryExpensesPagedParams) ([]Expense, error)
	GetExpenseByID(ctx context.Context, arg GetExpenseByIDParams) (Expense, error)
	GetTotalSpent(ctx context.Context, arg GetTotalSpentParams) (decimal.Decimal, error)
	GetTotalSpentInCategory(ctx context.Context, arg GetTotalSpentInCategoryParams) (decimal.Decimal, error)
	GetUserBudgets(ctx context.Context, arg GetUserBudgetsParams) ([]Budget, error)
	GetUserBudgetsPaged(ctx context.Context, arg GetUserBudgetsPagedParams) ([]Budget, error)
	// NOTE: Use this in login only to get the user and then
	// compare the hashed password with the one provided by the user
	GetUserByEmail(ctx context.Context, email string) (User, error)
	GetUserByID(ctx context.Context, id uuid.UUID) (User, error)
	GetUserCategories(ctx context.Context, arg GetUserCategoriesParams) ([]Category, error)
	GetUserCategoriesPaged(ctx context.Context, arg GetUserCategoriesPagedParams) ([]Category, error)
	GetUserExpenses(ctx context.Context, arg GetUserExpensesParams) ([]Expense, error)
	GetUserExpensesPaged(ctx context.Context, arg GetUserExpensesPagedParams) ([]Expense, error)
	// Since UpdateBudgetAmount is only called by the API, there is no need to
	// check if the user is the owner of the budget since the API already does that
	UpdateBudgetAmount(ctx context.Context, arg UpdateBudgetAmountParams) error
	UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error)
	// No need to get nullable params since when using update it need to get the
	// old values to update the budget
	UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error)
}

var _ Querier = (*Queries)(nil)
