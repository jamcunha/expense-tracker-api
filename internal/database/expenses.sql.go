// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: expenses.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createExpense = `-- name: CreateExpense :one

INSERT INTO expenses (id, created_at, updated_at, description, amount, category_id, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, description, amount, category_id, user_id
`

type CreateExpenseParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Description string
	Amount      string
	CategoryID  uuid.UUID
	UserID      uuid.UUID
}

// TODO: Order expenses by created_at DESC (to test with cursor pagination)
func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, createExpense,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Description,
		arg.Amount,
		arg.CategoryID,
		arg.UserID,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Amount,
		&i.CategoryID,
		&i.UserID,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :exec
DELETE FROM expenses WHERE id = $1
`

func (q *Queries) DeleteExpense(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteExpense, id)
	return err
}

const getCategoryExpenses = `-- name: GetCategoryExpenses :many
SELECT id, created_at, updated_at, description, amount, category_id, user_id FROM expenses WHERE category_id = $1
ORDER BY created_at ASC, id DESC
LIMIT $2
`

type GetCategoryExpensesParams struct {
	CategoryID uuid.UUID
	Limit      int32
}

func (q *Queries) GetCategoryExpenses(ctx context.Context, arg GetCategoryExpensesParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getCategoryExpenses, arg.CategoryID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Amount,
			&i.CategoryID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCategoryExpensesPaged = `-- name: GetCategoryExpensesPaged :many
SELECT id, created_at, updated_at, description, amount, category_id, user_id FROM expenses WHERE category_id = $1
AND created_at >= $2 AND id < $3
ORDER BY created_at ASC, id DESC
LIMIT $4
`

type GetCategoryExpensesPagedParams struct {
	CategoryID uuid.UUID
	CreatedAt  time.Time
	ID         uuid.UUID
	Limit      int32
}

func (q *Queries) GetCategoryExpensesPaged(ctx context.Context, arg GetCategoryExpensesPagedParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getCategoryExpensesPaged,
		arg.CategoryID,
		arg.CreatedAt,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Amount,
			&i.CategoryID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenseById = `-- name: GetExpenseById :one
SELECT id, created_at, updated_at, description, amount, category_id, user_id FROM expenses WHERE id = $1
`

func (q *Queries) GetExpenseById(ctx context.Context, id uuid.UUID) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpenseById, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Description,
		&i.Amount,
		&i.CategoryID,
		&i.UserID,
	)
	return i, err
}

const getUserExpenses = `-- name: GetUserExpenses :many
SELECT id, created_at, updated_at, description, amount, category_id, user_id FROM expenses WHERE user_id = $1
ORDER BY created_at ASC, id DESC
LIMIT $2
`

type GetUserExpensesParams struct {
	UserID uuid.UUID
	Limit  int32
}

func (q *Queries) GetUserExpenses(ctx context.Context, arg GetUserExpensesParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getUserExpenses, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Amount,
			&i.CategoryID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserExpensesPaged = `-- name: GetUserExpensesPaged :many
SELECT id, created_at, updated_at, description, amount, category_id, user_id FROM expenses WHERE user_id = $1
AND created_at >= $2 AND id < $3
ORDER BY created_at ASC, id DESC
LIMIT $4
`

type GetUserExpensesPagedParams struct {
	UserID    uuid.UUID
	CreatedAt time.Time
	ID        uuid.UUID
	Limit     int32
}

func (q *Queries) GetUserExpensesPaged(ctx context.Context, arg GetUserExpensesPagedParams) ([]Expense, error) {
	rows, err := q.db.QueryContext(ctx, getUserExpensesPaged,
		arg.UserID,
		arg.CreatedAt,
		arg.ID,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Description,
			&i.Amount,
			&i.CategoryID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
